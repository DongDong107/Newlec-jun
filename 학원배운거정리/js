자바스크립트!
자바스크립트는 오로지 참조만 하는것! 그래서 
자바스크립트는 Wapper클래스가 있다.
Boolean Number String 3가지의 Wapper클래스의 기본형~!
-> 기본형까지도 객체화 되어있다.
컴파일로 에러가 확인 불가능함
변수를 그냥 선언해버리면?
var x;->아직 어떤애가 정의된 적이 없다는 의미에 undefind의 타입을 가지게 됨
x=3; -> number라는 자료형을 가진다!

자바스크립트는 내려쓰기와 ;을 동시에 사용할 수 있다!
입문자들에게는 하기 편하다는 점이 있지만 

Attay 객체
데어터에 들어갈 녀석, index기반의 저장소
Stack저장소
Queue 저장소
Deaue 저장소1
var nums= new Array();max를 잡을 이유가 없다!
캘렉션과 달리 배열은 공간을 미리확보해야한다.

LIFO(Last in First Out)
스택:데이터를 쌓아올리는 방식이고 삭제하고 싶을때는 위에서 부터 삭제를 하는 방식
nums.push() 인덱스를 쓰는게 좋은게 아니다!                                                         
nums.push(12); //인덱스로 넣는게 아닌 스택방식으로 넣기
console.log(nums[5]); 
var  n1 = nums.pop();// 직접 꺼내서 대입시키고 nums에는 사라짐!
console.log(nums[5]); 
console.log(n1); 

FIFO(first in first out)
버퍼링을 위한 데이터 구조->불안정한 원격데이터를 수신에서는 안정적으로 받게 하기 위해 버퍼링을 만들자

DeQye(Double-Ended Queue)
양쪽에서 삽입/삭제가 가능한 Queue

데이터 조작하기  접착
배열 객체 생성
var nums = new Array(1,2,3,4,5);
Remove an item by index position
nums.splice(2);

배열의 나머지기능
루프 복사 찾기 필터 맵 concat등이 더 있다

Object객체
속성정의 속성다루기 속성복제
객체비교 속성상속 속성 값 열기
속성비교 속성 키 열거
->자바스크립트는 객체를 먼저 만들고 그 이후에 Object기능을 활용하는 거임!
마치 원하는거대로 만들어낼 수 있음

키와 값 2가지를 가지는 map?

JSON 표기법
->object를 생성하는 것이 부담스러워서 표기법을 간략하게 하는 방법

csv형식에서 JSON표기법으로 넘어온 이유
->데이터를 더 많이 중첩하고 ,를 표함해야하는 데이터를 표현해야할때는 ,하나로 표현할 수 없엇다.
그래서 태그를 이용해서 표현했지만-> 복잡하고 데이터가 커짐 그래서 나온 것이 JSON형식 


JSON 파싱-> 원격에 있는 배열형태의 JSON을 받으면 문자열 형식으로 받아지기 때문에 JSON형식으로 바꿔줄 필요가 있다.
eval()->evaluates 또는 executes 해주는 도구

//JSON
var exam= "[3,5,3,2]"; //배열을 외부에서 받아드리면 문자열로 받아지기 때문에 조심해야함
alert(exam[2]); //,가 나와버리네;
단 eval이란 애를 사용하면 문자열 안에 있는 문구를 실행해주는 효과를 가짐
eval("var x =3+3");
alert(x);
어떻게든 eval로 실행을 해줬는데 자체가 큰 부담이 될 수 있음
어떠한 코드도 실행해주기 때문에 추천을 안함!
그래서 데이터만 전문으로 바꿔주는 애를?->Json.parse


https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse

연산자
저번에 했으니 패스!
===는 객체비교
==는 값비교
논리연산자에서 특이한점!
if문에는 true와 false자체가 들어오면 안된다!-> 자바의 입장
그러한 값들이 넣어줘도 가능하다!-> 자바스크립트
console.log("dog"||"cat"); //dog가 나온다..? 
//->OR연산은 나란히 병렬로 있고 값들이 이어질때 처음만나는 true값을 반환해준다.그래도 못찾으면 마지막값을 반환!
//&&연산은 정반대니 처음만나는 false값을 내보내줌! 그래도 못찾으면 마지막값을 반환!

??연산
var foo = null ?? 'default string'//null이 아닌값을 찾을때!!`


NaN(Not a Number)
console.log(3+'3'); //덧셈은 숫자가 문자로 33
console.log(3*'3'); //곱셈은 문자가 숫자로 9
console.log(3+'a'); // 3a
console.log(3*'a'); // NaN이라는건 내가 문자로 숫자로 바꿀려고 할때 바뀔 수 없는 경우!

Infinity 무한값 비교가 안되서 IsFinite()
NaN-> 연산자로 비교가 안됨! 그래서 isNaN()
undefined
globalThis

제어구조

for -in :향상된  for문


for-of ->es6에서 드디어! Map 이 등장하면서 생긴애!